■ 開発
ウォーターフォール開発(
    「企画」「設計」「実装」「テスト」の4工程に分かれて、それぞれに担当が決まっている
    柔軟性があるあまりに、最初の方針を定期的に確認しないと開発の方向性がブレやすいデメリットも。
)
アジャイル開発(
    日本語訳で「素早い」「機敏」
    開発を小さな単位に分け「計画する」「設計、実装、テストを行う」
    「機能のリリースをする」という流れを、何度も繰り返す手法。全部の行程に携われる。
    開発の計画や予算の見積りが容易。
    工程以外の技術を必要としないため、人材育成や採用が比較的容易。
    デメリットは製品の完成後に初期段階のトラブルに気が付いた場合、戻るための工数が大きくなることです。
    それによって開発をやり直す時間やコストが膨らんでしまいます。
)
マイグレーション{
    移行、移転、移住、移動、乗換などの意味を持つ英単語
    ソフトウェアやシステム、データなどを別の環境に移転したり、新しい環境に切り替えたりすること
}
デグレーション{
    「プログラムを変更したら、前よりおかしくなっちゃった」な状態
}
デプロイ{配置する、展開するといった意味
    システム開発工程において、システムを利用可能な状態にすること
}
コンフリクト{

    競合、衝突、対立、葛藤、緊張、紛争などの意味
    複数の装置やプログラムなどが同じ資源を同時に利用しようとして競合状態になってしまうこと
}
【環境】
・開発環境（ローカル）{
    サーバーにアップする前に、サイトの動作や表示確認を手持ちのパソコン内で行うことを意味します。
    これによりインターネット上のサイトに影響を与えることなく、安心してカスタマイズを行うことが可能になる。
}
・検証環境（ステージング）{
    システム開発において本番環境とほぼ同等の条件で作成された最終確認のためのテストに用いるテスト環境のこと
    ステージング環境を用意することでシステム本番稼働後の不具合のリスクを最小限に抑えることが出来る。
}
・本番環境{
    システム開発に関する用語で、システムが製品として実際に稼動している環境のこと
}
【設計書／仕様書】
・要件定義{
    実装すべき機能や満たすべき性能などを明確にしていく作業のことです。 
    ユーザ部門から要求を引き出し、システムに実装するべき機能を整理します。 
    整理した内容をもとに、業務フローや業務シナリオを作成し、ユーザ部門と認識の齟齬がないことを確認する
    
    お客さまの実現したいことを詳しく聞き取り、
    そして「あなたがやりたいのは、こんなことだよね？」を、お客さまと一緒にまとめる工程
}
・基本設計書{
    顧客の要件を実現するためのシステム構成や機能を具体化する工程
    要件定義を参考にして「それじゃあ、実際にどんなシステムを作ろうね？」をざっくりと考える工程
}

    
・詳細設計書{
    基本設計でざっくり考えた概要をもとにして、実際のプログラムが作れるまで細かく落とし込む工程。
    基本設計はクライアントも一緒になって確認することが多いため、クライアントに見られることを想定して作る。
    しかし次工程である詳細設計ではクライアントを意識せずに社内開発者が、開発向けに作った設計書の場合が多い。
}
テスト
・単体テスト（UT）{ユニットテスト
    プログラムを構成する比較的小さな単位（ユニット）が個々の機能を正しく果たしているかどうかを
    検証するテスト。 通常、関数やメソッドが単体テストの単位（ユニット）となる。
}
・結合テスト（CT／IT）{IT（Integration Test）、CT（Combined Test）
    複数のプログラムやモジュールを同時に稼働して行う動作テストで、
    モジュール同士を結合した際に意図した通りに動作するかどうかを検証します。
    結合テストでは、ただ動作するかどうかをテストするのではなく、操作と機能動作の組み合わせが正しいか、
    仕様書通りに機能しているかについても検証します。
    単体テストによって、個々で正しく動作することが確認された機能やモジュールを対象とし、
    機能間の連携や一連の機能が仕様書通りに正しく動作するのかを確認します。
}
・総合テスト（ST){
    開発の最終段階にシステム全体を対象に行われるテスト。

    システムが全体として要求された仕様通りに動作するか、性能や負荷への耐性は十分か、
    操作性やセキュリティに問題が無いかなどを検証する。システムテストで問題が発見されなければ
    開発側での工程は終了し、顧客への引き渡し、顧客側での受け入れテスト（UAT/研修テスト）などを経て、
    実環境での稼働開始などの段階へ進む。
}
エビデンス／証跡{
    証拠となるであろう画面のハードコピー（画面の表示内容を保存したもの）やログ（何らかの記録）などのこと
}
データパッチ{
    ソフトに変更を加えるために用意された、後付けのプログラムのこと
    コンピュータにおいてプログラムの一部分を更新してバグ修正や機能変更を行うためのデータのこと。 
    「修正プログラム」や「アップデート（プログラム）」などとも呼ばれる。
     実際に変更を施す際は「パッチを当てる」、「パッチを適用する」と言う
}
Access{Microsoft Office Access
    Microsoftが提供するデータベース管理ソフト
    データベースの作成からデータの追加、更新、削除などの機能も備えているので、
    大規模なデータも取得しやすくデータ分析にも活用できます。
}
マクロ{
    複数の操作をまとめて必要に応じて呼び出せるようにする機能を指し, 特にExcelの自動化で使われる例が多く、
    データ集計や分類、シートの印刷などさまざまな作業を自動で行わせることができます。
}
VBA{Visual Basic for Applications
   
    Microsoft Officeに含まれるアプリケーションソフトの拡張機能で、
    利用者が簡易なプログラムを記述して実行することで複雑な処理の自動化などを行なうことができるもの。
    また、そのために用意されたプログラミング言語。
    WordやExcel、Access、PowerPointなどで利用できる機能で、
    同社のプログラミング言語および実行環境であるVisual Basicの簡易版を用いてプログラムを作成することが
    できる。
    便利なマクロ機能を構成するプログラミング言語
}
GAS（Google Apps Script）{
    Googleが提供しているプログラミング言語
    Googleが提供しているさまざまなサービスやツールを操作することができます。
    例Gmail　Googleカレンダー　Googleドキュメント　Googleスプレッドシート等
}
API{
    アプリケーション・プログラミング・インターフェース
    「何か」と「何か」が「アプリケーション、ソフトウェア」と「プログラム」をつなぐもの
    ソフトウェア同士を繋ぐもの、

例「APIを公開する」→ソフトウェアにAPIという外部とやりとりする窓口を作り、
外部アプリとコミュニケーションや連携ができる状態にする
}
・WEB API{
    WebサーバーまたはWebブラウザー用のアプリケーションプログラミングインターフェイス
}
・REST API{
    Webシステムを外部から利用するためのプログラムの呼び出し規約(API)の種類の一つで、
    RESTと呼ばれる設計原則に従って策定されたもの。
}
・SOAP{
    SimpleObject Access Protocolの略。
    リクエストおよびレスポンスともにXMLフォーマットのデータで行う形式。

    ・RESTでは不特定多数を対象にした、入力パラメータが少ない情報配信や検索サービス等での利用に向いている。
    ・SOAPでは複雑な入力を必要としたり、入出力に対してチェックを必要とするようなサービス等での利用に向いている。

}
Ajax{Asynchronous(非同期) JavaScript + XMLの略
    あるWebページを表示した状態のまま、別のページや再読込などを伴わずにWebサーバ側と通信を行い、
    動的に表示内容を変更する手法。ページ上でプログラムを実行できるプログラミング言語JavaScriptの拡張機能を
    用いる。
    ラインの通知やグーグル地図の拡大縮小がこれにあたる

}
XML{Extensible(拡張可能) Markup Languageの略
    文章の見た目や構造を記述するためのマークアップ言語の一種。
    XMLはデータの内容を記載する「タグ」を自由に設定することが可能であるため、非常に高い柔軟性を持ちながら、
    データに意味を持たせることができます。さらに親子構造を持たせることができるため、
    ツリー型や入れ子型と呼ばれるような、データの構造化を実現することができる点が特徴
}
JSON{JavaScript Object Notation(表記)
    JavaScriptにおけるオブジェクトの表記法を応用したテキスト（文字）ベースのデータ形式。
    多数の要素が複雑な構造で組み合わせられたデータを簡潔な表記で書き表すことができる。
    JavaScriptプログラム上ではコードとして実行するだけで読み込みが完了する。
}
ステータスコード{
    HTMLを表示する前にブラウザが受信する3桁の番号です。番号は100-510までの間で割り振られていて、
    各数値にはそれぞれ意味が付与されています。この3桁の数値を「HTMLを受信する前に」受信することで、
    ブラウザは正しい処理ができるようになります。

}
クロスオリジン（Cross-Origin）／CORS（Cross-Origin Resource Sharing）{
    ホームページを表示したときに、複数の場所（ドメイン）からデータを持ってくるようになっている状態のこと。
    
}
バリデーション{検証、実証、認可、妥当性確認などの意味を持つ。
    対象がその仕様や文法などに照らして適切に記述・構築されているか否かを検証するという意味で用いられる
}
データ連携{
    異なるアプリケーションやシステムをまたいでデータを共有、活用するために、
    それぞれの言葉や解釈の垣根を取り払うプロセス
    データ連携をする際には通常、データの形式を統一する必要がある。
}
Daemon{
    UNIX系OSでメインメモリ上に常駐して特定の機能を提供するプログラム。利用者の操作とは無関係に処理を行う
    バックグラウンドプロセスの一種で、別のプログラムや機器、通信相手など外部からの要求を受け付けて
    処理を実行したり、あらかじめ設定されたタイミングで自律的に特定の処理を実行したりする。

    例：メーラーデーモン・・存在しないメールアドレス宛てにメールを送ってしまうと
    「MAILER-DAEMON」とかいう名前で、英語の文章を送りつけてくるやつ。
    メーラーデーモンが一旦メールを受け付けて、配ろうとしたけど配る相手が
    いなかったので差出人に「ごめん、いなかった」と教えてくれているのです。
}
CRON{
    多くのUNIX系OSで標準的に利用される常駐プログラム（デーモン）の一種で、
    利用者の設定したスケジュールに従って指定されたプログラムを定期的に起動してくれる
}
バッチ{一束、一群、一団」といった意味
    一定量の(あるいは一定期間の)データを集め、一括処理するための処理方法
    PCの起動時には環境構築や自動設定、またはアプリケーションの自動実行などにバッチ処理が用いられている。
}
ログ{
    コンピュータの利用状況やデータ通信など履歴や情報の記録を取る事、またその記録を指す。 
    操作やデータの送受信が行われた日時と、行われた操作の内容や送受信されたデータの中身などが記録される。
}
CSV{Comma-Separated Values(値)の略
    テキスト（文字）データの形式の一つで、項目をカンマ「,」で区切って列挙したもの。
    複数の項目をレコードとしてまとめる場合は、改行でレコードの区切りを表す。
    標準のファイル拡張子は「.csv」
    単純な記法のテキストデータであるため対応プログラムの開発もしやすく、
    人間がテキストエディタなどで開いて直接読み書きすることも容易である。
}
TSV{Tab-Separated Valuesの略
    複数の項目で構成されるデータを複数件列挙して表現することができる汎用的なデータ形式の一つで、
    項目間の区切り文字にタブ文字を用いるもの。
}
プルリクエスト（マージリクエスト）{
    開発者のローカルリポジトリでの変更を他の開発者に通知する機能です。
    プルリクエストは、Git自身の機能ではなくGitHubが最初に提供した機能です。プルリクエストにより、
    多くの開発者がオープンソース開発に参加しやすくなり、
    結果として品質の高いコードを作ることが可能になりました。

    今では、ほとんどの主要なGitホスティングサービス(GitHub、BitBucket等)やツールで利用できます。
}

■ チケット管理ツール{タスク管理ツールのこと。
プロジェクト毎に発生する各種タスクを発行して、制作者に対して仕事を依頼するためのもの。
（自分自身で管理するために使用するのも可）}
asana{
    タスク整理に特化したプロジェクト管理ツールです。大きな特徴として、Asanaは、
    Slack/Dropbox/Googlecalendarなどのさまざまなアプリケーションとの連携が可能。
    現在使用しているアプリケーションとの連携がスムーズに行えるため、比較的容易に導入することができる。
}
Backlog{純国産のチケット管理ツール
    バージョン管理ができる。
    プロジェクトで発生するタスクなどの進捗状況を一括管理できるプロジェクト管理アプリ。
    }
Jooto{
    タスク管理機能に特徴のあるクラウド型の管理ツールです。看板方式で見やすいという点や、
    ドラッグ＆ドロップ方式による直感的な操作が可能なため、視覚的にすぐに使いこなすことが出来る
    すべてのOSやブラウザに対応しているため、スマートフォンやタブレットでも自由に使うことができる。
}
Redmine{
    世界的に非常に認知度の高いプロジェクト管理ツールとして知られており、自由度も高いクラウド型の管理ツール
    有名な管理ツール。無料で使用できる代わりにサーバーの用意は自分で行う必要がある。
    また比較的エンジニア向けの管理ツールです。
    無料で全ての機能を利用することが出来ます。エンジニア向けの管理ツールであり、視覚情報だけでは
    管理が難しいため、デモサイトなどで使い勝手を試す必要があるかも。
    また、対応言語も英語に偏っているため、慣れるまでは時間がかかる
}
Trello{
    タスクのカードを自由に動かしながら視覚的にプロジェクトを管理できるアプリケーションです。
    クラウド型で、ToDoリストによるタスク管理や、画像や動画、資料といった情報の共有もスムーズです。
    複数人の作業をリアルタイムで確認出来るため、リモートワークなどでも力を発揮するでしょう。完全に無料
}

■ バージョン管理{ファイルの変更履歴の保存・管理を行うソフトウェア}
集中型(SVN){Subversion
    ソフトウェア1つにつき）1つのリポジトリを使います。ソフトウェア開発に参加するメンバーは、
    中央リポジトリ（プロジェクトメンバー間で共有するリポジトリ）からソースコードを持ってきて編集し、
    編集が終わったら中央リポジトリに直接反映します。

    SVNは集中型のバージョン管理システムなので、リポジトリが置かれたサーバに接続できない環境の場合、
    最新のソースコードを取得やファイル編集の反映ができません。
}
分散型(GIT){
    リポジトリを複数持つことができ、開発の形態や規模に合わせてソースコードの管理ができます。
    リポジトリを複数用意できるので「分散型」と呼ばれています。

    大きな規模のソフトウェアの場合、個人や小さなチームで試験的に実装を進めて、ある程度進んだ時点で
    親のリポジトリや他の開発者のリポジトリに反映するといった使い方ができます。
    開発者同士の作業を柔軟に進めることができ、オープンソースのプロジェクトなどにも適している。
}
Github{
    バージョン管理システム「Git」（ギット）で管理するデータをインターネット上で
    共有・公開することができるネットサービスの一つ。米マイクロソフト（Microsoft）社傘下の
    同名企業（GitHub Inc.）が運営している。
    Gitで保管・管理するデータの集積（リポジトリ）を同社の運用するサーバ上に置き、
    組織内やチーム内で共有したり、広く一般に公開したりすることができる。

}
Backlog{
    チームではたらくすべての人が使えるプロジェクト管理ツールです。
    ガントチャート、Wiki、バージョン管理システムを使って
    プロジェクト計画・タスク管理・作業記録できる。

}
SourceTree{
    Atlassian(シドニーのソフトウェア企業)が無料で提供しているGitを用いたバージョン管理ツールです。
    SourceTreeで用いるBitBucketはGitHubと同じような機能を持っています。
    コマンドでバージョン管理することもできますが、SourceTreeはGUIで表現されているため、
    視覚的にわかりやすい点が特徴
}
Tortoise SVN{
    バージョン管理用のwindowsアプリで、GUI(画面）ベースでバージョンの管理ができる、便利なツール。
    コマンドは一切不要。

}
Git Flow{
    Vincent Driessen氏の「A successful Git branching model」を基にしたワークフロー
    他のワークフローと比べると、大規模で複雑な構成になっている。
    デスクトップ／モバイルアプリケーションのように「リリース」を必要とするソフトウェアの開発に適す。
}
・master{
    リリース済みのソースコードを管理する
}
・release{
    製品をリリースするために使うブランチ
    製品のリリース時には、関連する作業が必要になる場合が多いでしょう。そういった作業は、
    develop ブランチから release ブランチを切って、そのブランチでリリース作業を行います。
    リリース作業が完了したら、master ブランチと develop ブランチにマージして、
    master ブランチのマージコミットにリリースタグ（バージョンなど）をうちましょう。
    その後、release ブランチは削除します。
}
・develop{
    開発中のソースコードを管理する
}
・・feature{
    機能の追加や変更、バグフィックスを行うブランチ。
    ひとつの変更に対してひとつの feature ブランチを切ることになるため、開発中で最も使われるブランチになる。
    develop ブランチから派生させ、作業完了後に再び develop ブランチにマージします。
    そして、マージ完了後に削除するというのが一連の流れです。
}

■ FW／ライブラリ
●FW{
    全体の処理の流れが実装されており、その中の一部の具体的な処理を自分で実装して、
    はめ込めるようになっているシステム
    開発を行う際に必要となる機能や、基本的な骨組みをまとめたもので、
    プログラミング言語によって使用できる種類が異なる。
    フレームワークごとに、アプリの開発を支援するWebアプリケーションフレームワーク、機能性や
    操作性の向上を目的としたユーティリティ系フレームワーク、という2つの区分に分かれ、
    搭載されている機能も様々。
}
・Spring Framework{
    Javaプラットフォーム向けのオープンソースアプリケーションフレームワーク。
    専用のテストプログラムがある
}
・Struts{「Apache Struts」（アパッチストラッツ）
    The Apache Software Fundationが2000年から開発しているオープンソースのソフトウェア。
    JSP／サーブレットを使うJavaのWebアプリケーションを開発するうえで、最も使われているフレームワークの1つ。
    Struts開発のためのツールやStrutsのプラグイン、さらにStruts自体を拡張した
    フレームワーク／ライブラリやStrutsと連携できるフレームワーク／ライブラリも多数存在します。
}
・JSF（Java Server Faces）{
    Java言語を用いてWebアプリケーションを開発するためのフレームワークの一つで、Javaの開発元であるOracle社が
    開発・提供しているもの
    その仕様はJava EE（Java Platform, Enterprise Edition）の一部として取り込まれている。
    Webアプリケーションのインターフェイスを構築するためのフレームワーク。

}
●ライブラリ{
    使いたい部品が入っている道具箱
    フレームワークみたいな全体を動かすためのロジックがないということ。
    ただの部品の集まり。
}
・Bootstrap{「自動・自給の」「自動実行する」といった意味
    Twitterがサードパーティー向けの開発ツールとして2011年8月に公開した、
    Twitter風のデザインやUIのWebアプリケーションを素早く開発できるCSSのツールキットの名称。
    再利用性の高いWebパーツや各レイアウトのデザインを整える機能を豊富に備えているため、
    CSSのコードを一から組むことなくWebサイトのデザインを進められます。
    表示切り替えやアニメーションなど、ダイナミックなWebサイトを制作する際に必要な
    JavaScript・jQやコマンドラインツール形式で提供されており、柔軟に対応することができる。
}
・Jackson{
    javaのライブラリで、JSONオブジェクトをJavaオブジェクトにマップしたりその逆を行うことができる。

}
・jQuery{
    JavaScriptライブラリの一つ。ブラウザの種類に依らず簡潔な記述で豊富な機能を活用することができる。
    オープンソースとして公開・配布されている
}
・Junit{
    Java言語で開発されたプログラムの単体テスト（ユニットテスト）を行なうためのソフトウェア。
    また、そこで用いられるテストコードの記述体系を含むテストフレームワーク。

}
・Log4j{
    Javaのロギングユーティリティ。元々はCeki Gülcüにより開発されていたが、現在はApacheソフトウェア財団の
    プロジェクトの一つとなっている。主にデバッグ用ツールとして使用されている。
    log4jは、Java logging frameworkの一つである。
}
・Lombok{
    Java特有の冗長なコードを簡潔にしてくれるオープンソースのライブラリ

}
・ORM{(O/Rマッピング)
    オブジェクト指向言語におけるオブジェクトと、リレーショナルデータベースにおけるレコードとを
    対照させることである。ここでの「マッピング」とは「対応付ける」というほどの意味である。
    O/Rマッピングによって、リレーショナルデータベースのレコードがオブジェクトとして
    直感的に扱えるようになり、リレーショナルデータベースにアクセスするプログラムを記述する処理を
    容易にすることが可能となる。オブジェクトへのデータ取得などの処理を透過的に行えるようになるので、
    煩雑になりがちなデータベースに関する処理の記述がスマートになり、
    また柔軟なアプリケーションの構築が可能となる。
}

■ 連絡ツール
ChatWork{
    Chatwork株式会社が提供するクラウド型ビジネスチャットツールである。
    メッセージのやりとりだけでなく、タスク管理やファイル共有、ビデオ通話などが可能
}
Slack{
    スチュワート・バターフィールドによって開発されたチームコミュニケーションツール
    チームとコミュニケーションを図るための新しい手段です。メールよりも速く、整理され、安全な方法で実現できる
}
IP Messenger{
    プロトコルにTCP/IPを利用するメッセンジャーソフト
    同じネットワーク内のメンバーを自動認識し、簡単にクライアント同士がリアルタイムに情報交換できる
    優れたソフトウェアです。
    ブロードキャスト (broadcast) と呼ばれるパケットを LAN 内に送信する事で、他に IP Messenger を
    起動している PC を探索しユーザを自動認識しています。

    ブロードキャストパケットの到達範囲は、一般的に社内の同じ部署やフロアとなりますので、
    手軽に部署やプロジェクト内のユーザと情報交換ができるようになります。
}
TCP{(Transmission Control Protocol) 
   IPと同様にインターネットにおいて標準的に利用されているプロトコル。
   TCPは、IPの上位プロトコルでトランスポート層で動作するプロトコル。}

■ Java
Javadoc{
    JavaのソースコードからHTML形式のAPI仕様書を生成するものである。 JavadocはJavaクラスの仕様書の
    標準の書式であり、多くのIDEは自動的にJavadoc HTMLを生成する機能を備えている。
}
アノテーション{「注釈」を意味する語
    特定のデータに対して情報タグ（メタデータ）を付加する」という意味で用いられる言葉
    XML等の記述形式を用いてメタデータをタグ付けする場合が多い
}
メモリ管理{
    コンピュータのメモリを管理するもの。 単純化すれば、プログラム（プロセスなど）の要求に応じて
    メモリの一部を割り当てる方法と、そのメモリが不要となったときに再利用のために解放する方法を提供

}
ヒープ{
    OSやアプリケーションソフトが使用するメモリ領域の一種。用途に関係なく自由に確保することができる。
    OSからはヒープメモリを確保した位置のアドレスが渡され，アプリケーションソフトはこの値を元にして
    確保したヒープ領域を使用する。
    動的に確保と解放を繰り返せるメモリ領域のことです。
    プログラムの実行時には、OSからソフトウェアに対して一定量のヒープ領域が与えられます。
    ソフトウェアは、必要に応じて任意にヒープ領域を確保・解放できる。
    （対義語:スタック領域{
        スタック領域は、確保したのとは逆の順番で解放するのが特徴です。
        たとえば、A、B、Cの順に確保した場合、解放するのはC、B、Aの順となる）}
}
GC{ガベージコレクション（ garbage collection) ゴミ拾い、ゴミ集めの意
    コンピュータプログラムが動的に確保したメモリ領域のうち、不要になった領域を自動的に解放する機能
}
GoF{
    エリック・ガンマ（Erich Gamma）、リチャード・ヘルム（Richard Helm）、
    ラルフ・ジョンソン（Ralph Johnson）、ジョン・ブリシディース（John Vlissides）ら
    4人（GoF：Gang of Four）が執筆した書籍『Design Patterns:Elements of Reusable Object-Oriented Software』
    （邦題：『オブジェクト指向における再利用のためのデザインパターン』）に定義された23種類の
    デザインパターンを指す。
}
デザインパターン{
    ソフトウェア設計時に遭遇する典型的な問題に対して、その解決策に名前を付与して
    テンプレート化したもののこと。
}

■ その他
オブジェクト指向{
    互いに密接な関連性を持つデータとメソッドをひとつにまとめてオブジェクトとし、それぞれ異なる性質と
    役割を持たせたオブジェクトの様々な定義と、それらオブジェクトを相互に作用させる様々なプロセスの
    設定を通して、プログラム全体を構築するソフトウェア開発手法。

    ソフトウェア開発とコンピュータプログラミングのために用いられる考え方
}
バッチ処理{
    バッチ単位でおこなわれる処理
}
コンパイル{
    プログラムの翻訳作業のこと    
}
カバレッジ{取材範囲、補償範囲、受信範囲、対象範囲、被覆率などの意。
    ソフトウェア開発において、出来上がったプログラムのテストをする際に、どの程度を
    テスト対象とする（ことができる）かをカバレッジ（テストカバレッジ）という。

}
プラットホーム{
    ある機器やソフトウェアを動作させるのに必要な、
    基盤となる装置やソフトウェア、サービス、あるいはそれらの組み合わせ（動作環境）のこと

}

■おまけ
REST{
    REpresentational State Transferの略で、
    分散型システムにおける複数のソフトウェアを連携させるのに適した設計原則の集合、考え方のこと。
}
A successful Git branching model{
    オランダのエンジニアVincent Driessenさんのgitのブランチモデル。
    世界中に広く浸透し今やgit運用モデルとしてデファクトスタンダードになった。
}

デバッグ{
    バグを見つけて手直しすること
}
レコード{
    データベースを構成する単位のひとつで、データの1件分のことである。
    例えば住所録においては、1名分の情報がレコードとなる。
    1名の住所情報には氏名、住所、電話番号などの項目が含まれることになるが、
    それら個々の項目はフィールドと呼ばれる。

    複数のフィールドがレコードを構成し、複数のレコードはブロックを構成し、
    複数のブロックによってファイルが構成される。
}
モジュール{部品の意。
}

ホスティングサービス{
    通信事業者などが提供するサービスの一つで、専用の施設内に設置されたサーバコンピュータを
    インターネットを通じて顧客に貸与するもの。 顧客は借り受けたコンピュータに必要な
    ソフトウェアやデータを導入して運用する。
}
サーブレット{(Java Servlet)
    Webサーバ上（バックエンド）で動くプログラムのことで、
    プログラミング言語のJavaを使って作成されています。 動的なWebページの
    配信システムを実現するためのJavaプログラム
}
ロギングユーティリティ{
    プログラム内部から、デバッグ情報やエラー情報などのログデータを、
    コンソール、ファイル、その他ログサーバなどヘ出力する機能
}

dogetとdopostの違い{
・htmlのBodyタグに含めてサーブレットへ投げる場合：POST
・htmlのURLに含めてサーブレットを投げる場合：GET
簡単にリンクへ飛ぶときはdoGETでそのほかはdoPOST
}
LAMP{データベースを利用したWebアプリケーションを
開発・運用するのに適した、人気の高いオープンソースソフトウェアの組み合わせの一つ
Linux,apache,MYSQL,perl.python,PHPの頭字語}